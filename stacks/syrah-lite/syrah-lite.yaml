# ------------------------------------------------------------------------------
# PROGRAMMING ENVIRONMENT SECTION (PE)
#
# The PE section follows the syntax: <pe_name>_<stack_name>_<package_name>.
# for example: intel_stable_compiler. There is a parent child schema that must
# be respected. The metadata key is ignored for this purpose. The core PE only
# has one information and does not follow the same schema. Any key under the
# <package_name> will be seen as a filter or it will be ignored. In the future
# we may need to introduce a stack key and a dependencies key for the case where
# we want to compile the compiler or stack libraries with GPU support. For now,
# the core_compiler should have this name (this means 'core' key and 'compiler'
# for subkey. We can also set section:core for the core PE.
core:
  metadata:
    section: core
  compiler: <core_compiler>

intel:
  metadata:
    section: pe
  stable:
    compiler: intel@20.0.4
    mpi: intel-mpi@2019.10.317 +external-libfabric
    blas: intel-mkl@2020.4.304
    blas_parallel: intel-mkl@2020.4.304
    python3: python@<python3> +tkinter +optimizations ~debug
    gpu:
      nvidia: cuda@11.7.0
      none: ""

gcc:
  metadata:
    section: pe
  stable:
    compiler: gcc@11.3.0
    mpi:
      infiniband: mvapich2@2.3.7 fabrics=mrail process_managers=slurm threads=multiple
      ethernet: mvapich2@2.3.7 fabrics=mrail process_managers=slurm threads=multiple
    blas: openblas@0.3.20 threads=none +locking
    blas_parallel: openblas@0.3.20 threads=openmp +locking
    python3: python@<python3> +tkinter +optimizations ~debug
    python2: python@2.7.18 +tkinter ~debug
    gpu:
      nvidia: cuda@11.7.0
      none: ""

# ------------------------------------------------------------------------------
# PACKAGES SECTION
# ------------------------------------------------------------------------------
serial_packages_intel_stable:
  metadata: { section: packages }
  pe: [gcc_stable]
  packages:
    - perl@5.32.1